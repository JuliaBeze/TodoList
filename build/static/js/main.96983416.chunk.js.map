{"version":3,"sources":["TodoList.module.css","TodoListTitle.module.css","AddNewItemForm.module.css","TodoListTask.module.css","Footer.module.css","TodoListTask.js","TodoListTasks.js","TodoListFooter.js","TodoListTitle.js","AddNewItemForm.js","api.js","reducer.js","TodoList.js","App.js","serviceWorker.js","store.js","index.js"],"names":["module","exports","todoList","deleteTodoList","todoTitle","addForm","addNewForm","newTaskForm","deleteTasks","todoListFooter","TodoListTask","state","editMode","title","_this","props","task","onIsDoneChanged","e","changeStatus","id","currentTarget","checked","onTitleChanged","setState","value","activateEditMode","deactivateEditMode","changeTitle","onDeleteTask","deleteTask","render","containerCssClass","isDone","react_default","a","createElement","className","type","onChange","onBlur","autoFocus","onClick","priority","s","React","Component","TodoListTasks","tasksElements","tasks","map","src_TodoListTask","key","toDoListId","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","styles","TodoListTitle","todoListTitle","onTodoListClick","onTodoTitleChange","onUpdateTodoListTitle","updateTodoTitle","AddNewItemForm","error","onAddItemClick","newText","addItem","onKeyPress","classNameForInput","placeholder","instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","newTaskTitle","todolistId","post","concat","delete","todoListId","get","put","newTodoListTitle","ADD_TASK","initialState","toDoLists","reducer","arguments","length","undefined","action","_objectSpread","tl","Object","toConsumableArray","newTodoList","newTask","filter","t","taskId","createStore","addTaskTC","dispatch","then","res","data","item","AddTaskAC","TodoList","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","restoreState","setTasks","addTask","deleteToDoList","newFilterValue","changeTask","obj","_this$props$tasks","src_TodoListTitle","src_AddNewItemForm","src_TodoListTasks","src_TodoListFooter","newTasksTitileRef","createRef","ConnectedTodoList","connect","getState","find","forEach","changeTaskAC","changeTaskTC","DeleteTaskAC","deleteTaskTC","thunk","items","setTasksTC","updateTodoListAC","updateTitleTodoListTC","App","addTodoList","setTodoList","src_TodoList","ConnectedApp","setTodoListAC","Boolean","window","location","hostname","match","store","applyMiddleware","thunkMiddleware","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,SAAA,4CAAAC,eAAA,iCAAAC,UAAA,4BAAAC,QAAA,+CCAlBL,EAAAC,QAAA,CAAkBG,UAAA,sDCAlBJ,EAAAC,QAAA,CAAkBK,WAAA,oDAAAC,YAAA,yDCAlBP,EAAAC,QAAA,CAAkBO,YAAA,wECAlBR,EAAAC,QAAA,CAAkBQ,eAAA,0OCuEHC,6MA1DXC,MAAQ,CACJC,UAAU,EACVC,MAAOC,EAAKC,MAAMC,KAAKH,SAG3BI,gBAAkB,SAACC,GACfJ,EAAKC,MAAMI,aAAaL,EAAKC,MAAMC,KAAKI,GAAIF,EAAEG,cAAcC,YAGhEC,eAAiB,SAACL,GACdJ,EAAKU,SAAS,CAACX,MAAMK,EAAEG,cAAcI,WAIzCC,iBAAmB,WACfZ,EAAKU,SAAS,CAACZ,UAAU,OAG7Be,mBAAoB,WAChBb,EAAKU,SAAS,CAACZ,UAAU,IACzBE,EAAKC,MAAMa,YAAYd,EAAKC,MAAMC,KAAKI,GAAIN,EAAKH,MAAME,UAI1DgB,aAAa,WACTf,EAAKC,MAAMe,WAAWhB,EAAKC,MAAMC,KAAKI,OAI1CW,OAAS,WAEL,IAAIC,EAAoBlB,EAAKC,MAAMC,KAAKiB,OAAS,qBAAuB,gBAExE,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,GACZE,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WACLhB,QAASR,EAAKC,MAAMC,KAAKiB,OACzBM,SAAUzB,EAAKG,kBACrBH,EAAKH,MAAMC,SACNsB,EAAAC,EAAAC,cAAA,SAAOI,OAAQ1B,EAAKa,mBACbY,SAAUzB,EAAKS,eACfkB,WAAW,EACXhB,MAAOX,EAAKH,MAAME,QACzBqB,EAAAC,EAAAC,cAAA,QAAMM,QAAS5B,EAAKY,kBAApB,IAAwCZ,EAAKH,MAAME,OAT7D,eAUkBC,EAAKC,MAAMC,KAAK2B,SAC9BT,EAAAC,EAAAC,cAAA,UAAQC,UAAWO,IAAEpC,YAAakC,QAAS5B,EAAKe,cAAhD,qCAxDOgB,IAAMC,WCqBlBC,6MAnBXhB,OAAS,WAEL,IAAIiB,EAAgBlC,EAAKC,MAAMkC,MAAMC,IAAI,SAAAlC,GAAI,OAAIkB,EAAAC,EAAAC,cAACe,EAAD,CAAcC,IAAKpC,EAAKI,GACVU,WAAYhB,EAAKC,MAAMe,WACvBuB,WAAYvC,EAAKC,MAAMsC,WACvBrC,KAAMA,EACNG,aAAcL,EAAKC,MAAMI,aACzBS,YAAad,EAAKC,MAAMa,gBAIvF,OACIM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACVW,iCAfWH,IAAMC,4BCgCnBQ,6MA/BX3C,MAAQ,CACJ4C,UAAU,KAGdC,iBAAmB,WAAQ1C,EAAKC,MAAM0C,aAAa,UACnDC,uBAAyB,WAAQ5C,EAAKC,MAAM0C,aAAa,gBACzDE,oBAAsB,WAAQ7C,EAAKC,MAAM0C,aAAa,aACtDG,mBAAqB,WAAQ9C,EAAKU,SAAS,CAAC+B,UAAU,OACtDM,mBAAqB,WAAQ/C,EAAKU,SAAS,CAAC+B,UAAU,OAEtDxB,OAAS,WAEL,IAAI+B,EAAyC,QAA3BhD,EAAKC,MAAMgD,YAAwB,gBAAkB,GACnEC,EAA+C,cAA3BlD,EAAKC,MAAMgD,YAA8B,gBAAkB,GAC/EE,EAA4C,WAA3BnD,EAAKC,MAAMgD,YAA2B,gBAAkB,GAE7E,OACI7B,EAAAC,EAAAC,cAAA,OAAKC,UAAW6B,IAAOzD,iBACjBK,EAAKH,MAAM4C,UAAYrB,EAAAC,EAAAC,cAAA,WACpBF,EAAAC,EAAAC,cAAA,UAAQM,QAAU5B,EAAK0C,iBAAmBnB,UAAWyB,GAArD,OACA5B,EAAAC,EAAAC,cAAA,UAAQM,QAAU5B,EAAK4C,uBAAyBrB,UAAW2B,GAA3D,aACA9B,EAAAC,EAAAC,cAAA,UAAQM,QAAU5B,EAAK6C,oBAAsBtB,UAAW4B,GAAxD,YAGFnD,EAAKH,MAAM4C,UAAYrB,EAAAC,EAAAC,cAAA,QAAOM,QAAU5B,EAAK8C,oBAAtB,QACxB9C,EAAKH,MAAM4C,UAAYrB,EAAAC,EAAAC,cAAA,QAAMM,QAAU5B,EAAK+C,oBAArB,uCA3BZhB,IAAMC,4BCqCpBqB,6MAjCXxD,MAAQ,CACJC,UAAS,EACTwD,cAActD,EAAKC,MAAMF,SAG7BwD,gBAAkB,WACdvD,EAAKU,SAAS,CAACZ,UAAS,OAG5B0D,kBAAoB,SAACpD,GACjBJ,EAAKU,SAAS,CAAC4C,cAAclD,EAAEG,cAAcI,WAGjD8C,sBAAwB,WACpBzD,EAAKU,SAAS,CAACZ,UAAS,IACxBE,EAAKC,MAAMyD,gBAAgB1D,EAAKH,MAAMyD,kBAE1CrC,OAAS,WAEL,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAWO,IAAExC,WACbU,EAAKH,MAAMC,SACNsB,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOb,MAAOX,EAAKH,MAAMyD,cAC9B7B,SAAUzB,EAAKwD,kBACf9B,OAAQ1B,EAAKyD,wBACpBrC,EAAAC,EAAAC,cAAA,MAAIC,UAAWO,IAAE1C,SACbwC,QAAS5B,EAAKuD,iBAAkBvD,EAAKH,MAAMyD,8CA5BzCvB,IAAMC,4BCoDnB2B,6MAnDX9D,MAAQ,CACJ+D,OAAO,EACP7D,MAAM,MAIV8D,eAAiB,WACb,IAAIC,EAAU9D,EAAKH,MAAME,MACzBC,EAAKU,SAAS,CAACX,MAAO,KAEN,KAAZ+D,EACA9D,EAAKU,SAAS,CAACkD,OAAO,KAEtB5D,EAAKU,SAAS,CAACkD,OAAO,IACtB5D,EAAKC,MAAM8D,QAAQD,OAI3BrD,eAAiB,SAACL,GACdJ,EAAKU,SAAS,CACVkD,OAAO,EACP7D,MAAOK,EAAEG,cAAcI,WAK/BqD,WAAa,SAAC5D,GACI,UAAVA,EAAEkC,KACFtC,EAAK6D,oBAKb5C,OAAS,WACL,IAAIgD,EAAoBjE,EAAKH,MAAM+D,MAAQ,QAAU,GAErD,OAEIxC,EAAAC,EAAAC,cAAA,OAAKC,UAAWO,IAAErC,aACd2B,EAAAC,EAAAC,cAAA,SAAOC,UAAW0C,EAAmBzC,KAAK,OAAO0C,YAAY,gBACtDzC,SAAUzB,EAAKS,eACfuD,WAAYhE,EAAKgE,WACjBrD,MAAOX,EAAKH,MAAME,QACzBqB,EAAAC,EAAAC,cAAA,UAAQC,UAAWO,IAAEtC,WAAYoC,QAAS5B,EAAK6D,gBAA/C,sCA5Ca9B,IAAMC,kDCH7BmC,SAAWC,EAAMC,OAAO,CAC1BC,QAAS,0DACTC,iBAAiB,EACjBC,QAAS,CAACC,UAAW,0CAMZC,EAAI,SACDC,EAAaC,GACrB,OAAOT,EAASU,KAAT,IAAAC,OAAkBF,EAAlB,WACH,CAAC7E,MAAO4E,KAHPD,EAAI,SAMFpE,GACP,OAAO6D,EAASY,OAAT,UAAAD,OAA0BxE,KAP5BoE,EAAI,SAWGM,GACZ,OAAOb,EAASY,OAAT,IAAAD,OAAoBE,KAZtBN,EAAI,SAcE3E,GACX,OAAQoE,EAASU,KAAK,GAClB,CAAC9E,MAAOA,KAhBP2E,EAAI,WAoBT,OAAOP,EAASc,IAAI,KApBfP,EAAI,SAuBJpE,GACL,OAAO6D,EAASc,IAAT,IAAAH,OAAiBxE,EAAjB,aAxBFoE,EAAI,SA0BFxE,GACP,OAAOiE,EAASe,IAAT,SAAuBhF,IA3BzBwE,EAAI,SA6BOS,EAAkB7E,GAClC,OAAO6D,EAASe,IAAT,IAAAJ,OACCxE,GACJ,CAACP,MAAOoF,wjBCxCb,IACMC,EAAW,4BAUlBC,EAAe,CACjBC,UAAW,IAOTC,EAAU,WAAkC,IAAjC1F,EAAiC2F,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBH,EAAcM,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9C,OAAQC,EAAOnE,MACX,IAfiB,6BAgBb,OAAAoE,EAAA,GACO/F,EADP,CAEIyF,UAAUzF,EAAMyF,UAAUlD,IAAI,SAAAyD,GAC1B,OAAIA,EAAGvF,KAAOqF,EAAOpD,WACjBqD,EAAA,GAAWC,EAAX,CAAc1D,MAAMwD,EAAOxD,QAEpB0D,MAKvB,IA5BkB,2BA6Bd,OAAAD,EAAA,GACO/F,EADP,CAEIyF,UAAUK,EAAOL,UAAUlD,IAAI,SAAAyD,GAAE,OAAAD,EAAA,GAAOC,EAAP,CAAU1D,MAAM,SAGzD,IAvCoB,2BAyChB,OAAAyD,EAAA,GACO/F,EADP,CAEIyF,UAAS,GAAAR,OAAAgB,OAAAC,EAAA,EAAAD,CAAMjG,EAAMyF,WAAZ,CAAuBK,EAAOK,gBAE/C,KAAKZ,EACD,OAAAQ,EAAA,GACO/F,EADP,CAEIyF,UAAWzF,EAAMyF,UAAUlD,IAAI,SAAAyD,GAC3B,OAAIA,EAAGvF,KAAOqF,EAAOX,WACjBY,EAAA,GAAWC,EAAX,CAAe1D,MAAK,CAAGwD,EAAOM,SAAVnB,OAAAgB,OAAAC,EAAA,EAAAD,CAAqBD,EAAG1D,UAErC0D,MAKvB,IAvDmB,+BAwDf,OAAAD,EAAA,GACO/F,EADP,CAEIyF,UAAWzF,EAAMyF,UAAUlD,IAAI,SAAAyD,GAC3B,OAAIA,EAAGvF,KAAOqF,EAAOX,WACjBY,EAAA,GACOC,EADP,CAEI1D,MAAO0D,EAAG1D,MAAMC,IAAI,SAAAlC,GAChB,OAAIA,EAAKI,KAAOqF,EAAOM,QAAQ3F,GACpBqF,EAAOM,QAEP/F,MAKZ2F,MAIvB,IAtEuB,mCAuEnB,OAAAD,EAAA,GACO/F,EADP,CAEIyF,UAAWzF,EAAMyF,UAAUlD,IAAI,SAAAyD,GAC3B,OAAIA,EAAGvF,KAAOqF,EAAOX,WACjBY,EAAA,GACOC,EADP,CAEIP,UAAS,GAAAR,OAAAgB,OAAAC,EAAA,EAAAD,CAAMjG,EAAMyF,WAAZ,CAAsBK,EAAOK,gBAGnCH,MAIvB,IAnF6B,yCAoFzB,OAAAD,EAAA,GACO/F,EADP,CAEIyF,UAAWzF,EAAMyF,UAAUlD,IAAI,SAAAyD,GAC3B,OAAIA,EAAGvF,KAAOqF,EAAOf,WACjBgB,EAAA,GACOC,EADP,CACW9F,MAAO4F,EAAOf,aAGlBiB,MAIvB,IArGmB,gCAsGf,OAAAD,EAAA,GACO/F,EADP,CAEIyF,UAAWzF,EAAMyF,UAAUlD,IAAI,SAAAyD,GAC3B,OAAIA,EAAGvF,KAAOqF,EAAOpD,WACjBqD,EAAA,GAAWC,EAAX,CAAe1D,MAAO0D,EAAG1D,MAAM+D,OAAO,SAAAC,GAAC,OAAIA,EAAE7F,KAAOqF,EAAOS,WAExDP,MAGnB,IA9GuB,mCA+GnB,OAAAD,EAAA,GACO/F,EADP,CAEIyF,UAAWzF,EAAMyF,UAAUY,OAAO,SAAAL,GAAE,OAAIA,EAAGvF,KAAOqF,EAAOrF,OAEjE,QACI,OAAOT,IAGnBwG,YAAYd,GAEL,IAoBMe,EAAY,SAACxC,EAASkB,GAC/B,OAAM,SAACuB,GACH7B,EAAeZ,EAASkB,GAAYwB,KAAK,SAAAC,GACjC,IAAIR,EAAUQ,EAAIC,KAAKA,KAAKC,KAC5BJ,EAvBS,SAACN,EAASjB,GAAV,MAAyB,CAACxD,KAAM4D,EAAUa,UAASjB,cAuBnD4B,CAAUX,EAAQjB,QAwE5BO,qBClNTsB,cAEF,SAAAA,EAAY5G,GAAO,IAAAD,EAAA,OAAA8F,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAAF,IACf7G,EAAA8F,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAAe,GAAAK,KAAAH,KAAM9G,KAWVkH,aAAe,WACXnH,EAAKC,MAAMmH,SAASpH,EAAKC,MAAMK,KAbhBN,EAgBnBH,MAAQ,CACJsC,MAAO,GACPc,YAAa,OAlBEjD,EAqBnBqH,QAAU,SAACvD,GACP9D,EAAKC,MAAMoH,QAAQvD,EAAQ9D,EAAKC,MAAMK,KAtBvBN,EAyBnBgB,WAAa,SAACoF,GACVpG,EAAKC,MAAMe,WAAWhB,EAAKC,MAAMK,GAAI8F,IA1BtBpG,EA8BnBsH,eAAiB,WACbtH,EAAKC,MAAMqH,eAAetH,EAAKC,MAAMK,KA/BtBN,EAkCnB2C,aAAe,SAAC4E,GACZvH,EAAKU,SAAU,CACXuC,YAAasE,KApCFvH,EAuCnB0D,gBAAkB,SAACyB,GACfnF,EAAKC,MAAMyD,gBAAgByB,EAAkBnF,EAAKC,MAAMK,KAxCzCN,EA2CnBwH,WAAa,SAACpB,EAAOqB,GACjBzH,EAAKC,MAAMuH,WAAWpB,EAAOqB,EAAIzH,EAAKC,MAAMK,KA5C7BN,EA+CnBK,aAAe,SAAC+F,EAAQjF,GACpBnB,EAAKwH,WAAWpB,EAAQ,CAACjF,OAAQA,KAhDlBnB,EAkDnBc,YAAc,SAACsF,EAAQrG,GACnBC,EAAKwH,WAAWpB,EAAQ,CAACrG,MAAOA,KAnDjBC,EAuDnBiB,OAAS,WAAM,IAAAyG,EACM1H,EAAKC,MAAjBkC,aADM,IAAAuF,EACA,GADAA,EAGX,OAEItG,EAAAC,EAAAC,cAAA,OAAKC,UAAWO,IAAE1C,UACdgC,EAAAC,EAAAC,cAAA,OAAKC,UAAWO,IAAExC,WACd8B,EAAAC,EAAAC,cAACqG,EAAD,CAAejE,gBAAiB1D,EAAK0D,gBACtB3D,MAAOC,EAAKC,MAAMF,MAClBO,GAAIN,EAAKC,MAAMK,MAClCc,EAAAC,EAAAC,cAAA,UAAQC,UAAWO,IAAEzC,eAAgBuC,QAAS5B,EAAKsH,gBAAnD,KACAlG,EAAAC,EAAAC,cAAA,OAAKC,UAAWO,IAAEvC,SACd6B,EAAAC,EAAAC,cAACsG,EAAD,CAAgB7D,QAAS/D,EAAKqH,WAKlCjG,EAAAC,EAAAC,cAACuG,EAAD,CACI7G,WAAYhB,EAAKgB,WACjBuB,WAAYvC,EAAKC,MAAMsC,WACvBlC,aAAcL,EAAKK,aACnBS,YAAad,EAAKc,YAClBqB,MAAOA,EAAM+D,OAAO,SAAAC,GAChB,MAA+B,QAA3BnG,EAAKH,MAAMoD,cAGgB,WAA3BjD,EAAKH,MAAMoD,aACS,IAAbkD,EAAEhF,OAEkB,cAA3BnB,EAAKH,MAAMoD,aACS,IAAbkD,EAAEhF,YADb,OAIRC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACwG,EAAD,CAAgBnF,aAAc3C,EAAK2C,aAAcM,YAAajD,EAAKH,MAAMoD,iBAvFrFjD,EAAK+H,kBAAoBhG,IAAMiG,YAFhBhI,mFAOf+G,KAAKI,sBATUpF,IAAMC,WAgIdiG,EADWC,YAAQ,KAzBP,SAAC3B,GACxB,MAAO,CACHc,QADG,SACKvD,EAASkB,GACbuB,EAASD,EAAUxC,EAASkB,KAGhCwC,WALG,SAKQpB,EAAOqB,EAAIzC,GAClBuB,EDqFiB,SAACH,EAAOqB,EAAIzC,GACrC,OAAM,SAACuB,EAAS4B,GACZA,IACK7C,UAAU8C,KAAK,SAAAvC,GAAE,OAAIA,EAAGvF,KAAO0E,IAC/B7C,MAAMkG,QAAQ,SAAAlC,GACX,GAAIA,EAAE7F,KAAM8F,EAAO,CACf,IAAIH,EAAOL,EAAA,GAAOO,EAAP,GAAasB,GACxB/C,EAAeuB,GACVO,KAAK,SAAAC,GACFF,EAvFA,SAACN,EAASjB,GAAV,MAA0B,CAACxD,KA7H5B,+BA6H+CyE,UAASjB,cAuF9CsD,CAAa7B,EAAIC,KAAKA,KAAKC,KAAK3B,UC9FhDuD,CAAanC,EAAOqB,EAAIzC,KAErChE,WARG,SAQQuB,EAAY6D,GACnBG,ED+BgB,SAAChE,EAAY6D,GACrC,OAAM,SAACG,GACH7B,EAAe0B,GACVI,KAAKD,EA7BU,SAAChE,EAAY6D,GAAb,MAAyB,CAAC5E,KA7H3B,gCA6H8Ce,aAAY6D,UA6B1DoC,CAAajG,EAAY6D,MClC/BqC,CAAalG,EAAY6D,KAEtCkB,eAXG,SAWahH,GD2CO,IAAC0E,EC1CpBuB,GD0CoBvB,EC1CM1E,ED2C5B,SAACiG,GACH7B,EAAmBM,GACdwB,KAAK,SAAAC,GACFF,EA3CyB,CAAC/E,KA7HX,mCA6HkClB,GA2CvB0E,UC5ClCoC,SAdG,SAcMpC,GACL,IAAI0D,EDQU,SAAC1D,GACvB,OAAM,SAACuB,GACH7B,EAAaM,GACRwB,KAAK,SAAAC,GACFF,EAViC,CAAC/E,KA7HzB,6BA6HyCW,MAU9BsE,EAAIC,KAAKiC,MAV2BpG,WAUrByC,OCZ3B4D,CAAW5D,GACvBuB,EAASmC,IAEbhF,gBAlBG,SAkBayB,EAAkBP,GAC9B2B,ED2CyB,SAACpB,EAAiBP,GAEnD,OAAM,SAAC2B,GACH7B,EAAwBS,EAAiBP,GACpC4B,KAAK,SAAAC,GACFF,EAjDgB,SAAC3B,GAAD,MAAiB,CAACpD,KA5Hb,yCA4H0CoD,cAiDtDiE,CAAkB1D,OChDtB2D,CAAsB3D,EAAkBP,OAKnCsD,CAAiCrB,GCvIrDkC,6MAGFlJ,MAAQ,CACJyF,UAAW,MAGf0D,YAAc,SAACjJ,GACXC,EAAKC,MAAM+I,YAAYjJ,MAO3BoH,aAAe,WACXnH,EAAKC,MAAMgJ,iBAGfhI,OAAS,WACL,IAAMqE,EAAYtF,EAAKC,MAAMqF,UAAUlD,IAAI,SAAAyD,GAAE,OAAIzE,EAAAC,EAAAC,cAAC4H,EAAD,CAAU5G,IAAKuD,EAAGvF,GAAIA,GAAIuF,EAAGvF,GAAIP,MAAO8F,EAAG9F,MACjCoC,MAAO0D,EAAG1D,UACrE,OACIf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,iDACAF,EAAAC,EAAAC,cAACsG,EAAD,CACI7D,QAAS/D,EAAKgJ,gBAG1B5H,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACV+D,wFApBbyB,KAAKI,sBAZKpF,IAAMC,WA2DTmH,EAHMjB,YAjBG,SAACrI,GACrB,MAAO,CACHyF,UAAWzF,EAAMyF,YAIE,SAACiB,GACxB,MAAO,CACHyC,YADG,SACShD,GFuIS,IAACV,EEtIlBiB,GFsIkBjB,EEtIKU,EFuIzB,SAACO,GACH7B,EAAmBY,GACdkB,KAAK,SAAAC,GACF,IAAInB,EAAYmB,EAAIC,KAAKA,KAAKC,KAC9BJ,EAjE+B,CAAC/E,KA7HpB,2BA6HuCwE,YAiE5BV,UEzI/B2D,YAJG,SAIS3D,GACRiB,EF+IF,SAACA,GACH7B,IACK8B,KAAK,SAAAC,GACFF,EAtEa,SAACjB,GAAD,MAAgB,CAAC9D,KA7HpB,2BA6HuC8D,aAsExC8D,CAAc3C,EAAIC,cE7ItBwB,CAA6Ca,GClD9CM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECJSC,EARDrD,YACVd,EACAoE,YAAgBC,MCApBC,IAAS5I,OACLG,EAAAC,EAAAC,cAACwI,EAAA,EAAD,CAAUJ,MAAOA,GACbtI,EAAAC,EAAAC,cAACyI,EAAD,OACAC,SAASC,eAAe,SFsH1B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5D,KAAK,SAAA6D,GACjCA,EAAaC","file":"static/js/main.96983416.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoList\":\"TodoList_todoList__3owF1 index_btn__2oI9s\",\"deleteTodoList\":\"TodoList_deleteTodoList__1G8Qc\",\"todoTitle\":\"TodoList_todoTitle___7EgN\",\"addForm\":\"TodoList_addForm__35U87\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoTitle\":\"TodoListTitle_todoTitle__3qnhT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addNewForm\":\"AddNewItemForm_addNewForm__1ZziQ index_btn__2oI9s\",\"newTaskForm\":\"AddNewItemForm_newTaskForm__3WNMz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteTasks\":\"TodoListTask_deleteTasks__2kHQi index_btn__2oI9s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoListFooter\":\"Footer_todoListFooter__3NpI4\"};","import React from 'react';\nimport s from './TodoListTask.module.css'\n\n\nclass TodoListTask extends React.Component {\n\n\n\n\n\n\n\n\n\n    state = {\n        editMode: false,\n        title: this.props.task.title\n    };\n\n    onIsDoneChanged = (e) => {\n        this.props.changeStatus(this.props.task.id, e.currentTarget.checked);\n    };\n\n    onTitleChanged = (e) => {\n        this.setState({title:e.currentTarget.value})\n        // this.props.changeTitle(this.props.task.id, e.currentTarget.value);\n    };\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    }\n\n    deactivateEditMode= () => {\n        this.setState({editMode: false});\n        this.props.changeTitle(this.props.task.id, this.state.title);\n\n    }\n\n    onDeleteTask=()=> {\n        this.props.deleteTask(this.props.task.id)\n    };\n\n\n    render = () => {\n\n        let containerCssClass = this.props.task.isDone ? \"todoList-task done\" : \"todoList-task\";\n\n        return (\n            <div>\n                <div className={containerCssClass}>\n                    <input type=\"checkbox\"\n                           checked={this.props.task.isDone}\n                           onChange={this.onIsDoneChanged}/>\n                    {this.state.editMode\n                        ? <input onBlur={this.deactivateEditMode}\n                                 onChange={this.onTitleChanged}\n                                 autoFocus={true}\n                                 value={this.state.title}/>\n                        : <span onClick={this.activateEditMode}> {this.state.title}</span>\n                    }, priority: {this.props.task.priority}\n                    <button className={s.deleteTasks} onClick={this.onDeleteTask}>X</button>\n\n\n\n\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n\n    render = () => {\n\n        let tasksElements = this.props.tasks.map(task => <TodoListTask key={task.id}\n                                                                       deleteTask={this.props.deleteTask}\n                                                                       toDoListId={this.props.toDoListId}\n                                                                       task={task}\n                                                                       changeStatus={this.props.changeStatus}\n                                                                       changeTitle={this.props.changeTitle}\n        />);\n\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport '../src/App.css';\nimport styles from \"./Footer.module.css\"\nclass TodoListFooter extends React.Component {\n\n    state = {\n        isHidden: false\n    };\n\n    onAllFilterClick = () => { this.props.changeFilter(\"All\"); };\n    onCompletedFilterClick = () => { this.props.changeFilter(\"Completed\"); };\n    onActiveFilterClick = () => { this.props.changeFilter(\"Active\"); };\n    onShowFiltersClick = () => { this.setState({isHidden: true}) };\n    onHideFiltersClick = () => { this.setState({isHidden: false}) };\n\n    render = () => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className={styles.todoListFooter}>\n                {!this.state.isHidden && <div>\n                     <button onClick={ this.onAllFilterClick } className={classForAll}>All</button>\n                     <button onClick={ this.onCompletedFilterClick } className={classForCompleted}>Completed</button>\n                     <button onClick={ this.onActiveFilterClick } className={classForActive}>Active</button>\n                  </div>\n                }\n                { !this.state.isHidden && <span  onClick={ this.onShowFiltersClick }>Hide</span>}\n                { this.state.isHidden && <span onClick={ this.onHideFiltersClick }>Show</span> }\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\nimport s from './TodoListTitle.module.css'\n\n\nclass TodoListTitle extends React.Component {\n\n    state = {\n        editMode:false,\n        todoListTitle:this.props.title\n    };\n\n    onTodoListClick = ()=> {\n        this.setState({editMode:true})\n    }\n\n    onTodoTitleChange = (e)=> {\n        this.setState({todoListTitle:e.currentTarget.value})\n    };\n\n    onUpdateTodoListTitle = ()=>{\n        this.setState({editMode:false})\n        this.props.updateTodoTitle(this.state.todoListTitle)\n    }\n    render = () => {\n\n        return (\n            <div className={s.todoTitle}>\n                {this.state.editMode\n                    ? <input type=\"text\" value={this.state.todoListTitle}\n                             onChange={this.onTodoTitleChange}\n                             onBlur={this.onUpdateTodoListTitle}/>\n                    : <h3 className={s.todoList}\n                          onClick={this.onTodoListClick}>{this.state.todoListTitle}</h3>}\n\n            </div>\n        );\n    }\n}\n\nexport default TodoListTitle;\n\n","import React from 'react';\nimport './App.css';\n\nimport s from './AddNewItemForm.module.css'\n\nclass AddNewItemForm extends React.Component {\n    state = {\n        error: false,\n        title:\"\"\n    };\n\n\n    onAddItemClick = () => {\n        let newText = this.state.title;\n        this.setState({title: \"\"});\n\n        if (newText === \"\") {\n            this.setState({error: true});\n        } else {\n            this.setState({error: false});\n            this.props.addItem(newText);\n        }\n    };\n\n    onTitleChanged = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value,\n\n        });\n    };\n\n    onKeyPress = (e) => {\n        if (e.key === \"Enter\") {\n            this.onAddItemClick();\n        }\n    };\n\n\n    render = () => {\n        let classNameForInput = this.state.error ? \"error\" : \"\";\n\n        return (\n\n            <div className={s.newTaskForm}>\n                <input className={classNameForInput} type=\"text\" placeholder=\"New item name\"\n                       onChange={this.onTitleChanged}\n                       onKeyPress={this.onKeyPress}\n                       value={this.state.title}/>\n                <button className={s.addNewForm} onClick={this.onAddItemClick}>Add</button>\n\n            </div>\n\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/todo-lists\",\n    withCredentials: true,\n    headers: {\"API-KEY\": \"33b08604-f7c7-406c-9da3-f5d36527b14f\"}\n});\n\n\n\n\nexport const api={\n    createTask (newTaskTitle,todolistId){\n        return instance.post(`/${todolistId}/tasks/`,\n            {title: newTaskTitle}\n        )\n    },\n    deleteTask(id){\n        return instance.delete(`/tasks/${id}`\n        )\n    },\n\n    deleteToDoList (todoListId){\n        return instance.delete(`/${todoListId}`)\n    },\n    createTodoList(title){\n        return  instance.post(\"\",\n            {title: title}\n        )\n    },\n    getTodoLists(){\n        return instance.get(\"\")\n\n    },\n    getTasks(id) {\n        return instance.get(`/${id}/tasks/`)\n    },\n    updateTask(task){\n        return instance.put(`/tasks`, task)\n    },\n    updateTitleTodoList(newTodoListTitle, id) {\n        return instance.put(\n            `/${id}`,\n            {title: newTodoListTitle})\n    }\n};\n\n\n\n\n\n\n\n","import {createStore} from \"redux\";\nimport {api} from \"./api\";\n\nexport const ADD_TODOLIST = \"App/reducer/ADD-TODOLIST\";\nexport const ADD_TASK = \"TodoList/Reducer/ADD-TASK\";\nexport const CHANGE_TASK = \"TodoList/Reducer/CHANGE-TASK\";\nexport const DELETE_TASK = \"TodoList/Reducer/ DELETE-TASK\";\nexport const DELETE_TODOLIST = \"TodoList/Reducer/DELETE-TODOLIST\";\nexport const SET_TODOLIST=\"App/reducer/SET-TODOLIST\";\nexport const SET_TASKS = \"TodoList/Reducer/SET-TASKS\";\nexport const CHANGE_TODOLIST = \"TodoList/Reducer/CHANGE-TODOLIST\";\nexport const UPDATE_TODOLIST_TITLE = \"TodoList/Reducer/UPDATE_TODOLIST_TITLE\";\n\n\nconst initialState = {\n    toDoLists: [\n        // {\"id\": 0, \"title\": \"Everyday\", tasks: []},\n        // {\"id\": 1, \"title\": \"Tomorrow\", tasks: []},\n        // {\"id\": 2, \"title\": \"Every week\", tasks: []},\n        // {\"id\": 3, \"title\": \"Every year\", tasks: []},\n    ]\n}\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_TASKS:{\n            return {\n                ...state,\n                toDoLists:state.toDoLists.map(tl=>{\n                    if (tl.id === action.toDoListId) {\n                        return {...tl,tasks:action.tasks}\n                    }else {\n                        return tl;\n                    }\n                })\n            }\n        }\n        case SET_TODOLIST:{\n            return {\n                ...state,\n                toDoLists:action.toDoLists.map(tl=>({...tl,tasks:[]}))\n            }\n        }\n        case ADD_TODOLIST:\n\n            return {\n                ...state,\n                toDoLists: [...state.toDoLists, action.newTodoList]\n            }\n        case ADD_TASK:\n            return {\n                ...state,\n                toDoLists: state.toDoLists.map(tl => {\n                    if (tl.id === action.todoListId) {\n                        return {...tl, tasks: [action.newTask,...tl.tasks]}\n                    } else {\n                        return tl\n                    }\n                })\n\n            }\n        case CHANGE_TASK :\n            return {\n                ...state,\n                toDoLists: state.toDoLists.map(tl => {\n                    if (tl.id === action.todoListId) {\n                        return {\n                            ...tl,\n                            tasks: tl.tasks.map(task => {\n                                if (task.id === action.newTask.id) {\n                                    return action.newTask\n                                } else {\n                                    return task\n                                }\n                            })\n                        }\n                    } else {\n                        return tl\n                    }\n                })\n            }\n        case CHANGE_TODOLIST :\n            return {\n                ...state,\n                toDoLists: state.toDoLists.map(tl => {\n                    if (tl.id === action.todoListId) {\n                        return {\n                            ...tl,\n                            toDoLists: [...state.toDoLists,action.newTodoList]\n                        }\n                    } else {\n                        return tl\n                    }\n                })\n            }\n        case UPDATE_TODOLIST_TITLE:\n            return {\n                ...state,\n                toDoLists: state.toDoLists.map(tl => {\n                    if (tl.id === action.todolistId) {\n                        return {\n                            ...tl, title: action.todolistId\n                        }\n                    } else {\n                        return tl\n                    }\n                })\n            }\n        case DELETE_TASK :\n            return {\n                ...state,\n                toDoLists: state.toDoLists.map(tl => {\n                    if (tl.id === action.toDoListId) {\n                        return {...tl, tasks: tl.tasks.filter(t => t.id !== action.taskId)}\n                    }\n                    return tl\n                })\n            }\n        case DELETE_TODOLIST:\n            return {\n                ...state,\n                toDoLists: state.toDoLists.filter(tl => tl.id !== action.id)\n            }\n        default:\n            return state\n    }\n}\ncreateStore(reducer);\n\nexport const AddTodoListAC = (newTodoList) => ({type: ADD_TODOLIST,newTodoList})\nexport const AddTaskAC = (newTask, todoListId) =>({type: ADD_TASK, newTask, todoListId})\nexport const changeTaskAC = (newTask, todoListId) => ({type: CHANGE_TASK, newTask, todoListId});\nexport const DeleteTaskAC = (toDoListId, taskId) => ({type: DELETE_TASK, toDoListId, taskId});\nexport const DeleteTodoListAC = (id) => ({type: DELETE_TODOLIST, id});\nexport const setTodoListAC = (toDoLists) => ({type: SET_TODOLIST,toDoLists});\nexport const SetTasksAC = (tasks,toDoListId) => ({type: SET_TASKS,tasks,toDoListId});\nexport const updateTodoListAC = (todolistId) => ({type: UPDATE_TODOLIST_TITLE, todolistId});\n\n\n\n\nexport const setTasksTC = (todoListId)=> {\n    return(dispatch) => {\n        api.getTasks(todoListId)\n            .then(res=>{\n                dispatch(SetTasksAC(res.data.items,todoListId))\n            })\n    }\n};\nexport const addTaskTC = (newText, todoListId)=> {\n    return(dispatch)=>{\n        api.createTask(newText, todoListId).then(res=> {\n                let newTask = res.data.data.item;\n                dispatch(AddTaskAC(newTask,todoListId))\n            })\n    }\n};\n\nexport const deleteTaskTC = (toDoListId, taskId)=> {\n    return(dispatch)=> {\n        api.deleteTask(taskId)\n            .then(dispatch(DeleteTaskAC(toDoListId, taskId))\n            );\n    }\n};\n\n\n\n\n\n\n\nexport const deleteToDoListTC =(todoListId)=>{\n    return(dispatch)=> {\n        api.deleteToDoList(todoListId)\n            .then(res => {\n                dispatch(DeleteTodoListAC(todoListId))\n            });\n    }\n};\nexport const updateTitleTodoListTC = (newTodoListTitle,todolistId)=> {\n    debugger\n    return(dispatch)=> {\n        api.updateTitleTodoList(newTodoListTitle,todolistId)\n            .then(res => {\n                dispatch(updateTodoListAC( newTodoListTitle,todolistId));\n            });\n    }\n};\nexport const addTodoListTC = (toDoLists) => {\n    return(dispatch)=>{\n        api.createTodoList(toDoLists)\n            .then(res => {\n                let toDoLists = res.data.data.item;\n                dispatch(AddTodoListAC(toDoLists))\n            })\n    }\n};\n\nexport const setTodoListTC =(toDoLists)=> {\n    debugger\n    return(dispatch)=> {\n        api.getTodoLists()\n            .then(res=>{\n                dispatch(setTodoListAC(res.data,toDoLists))\n            })\n    }\n};\n\nexport const  changeTaskTC = (taskId,obj,todoListId)=> {\n    return(dispatch,getState)=> {\n        getState()\n            .toDoLists.find(tl => tl.id === todoListId)\n            .tasks.forEach(t=>{\n                if (t.id=== taskId){\n                    let newTask = {...t, ...obj}\n                    api.updateTask(newTask)\n                        .then(res => {\n                            dispatch(changeTaskAC(res.data.data.item,todoListId))\n                        });\n                }\n            }\n        );\n    }\n};\nexport default reducer;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport TodoListTitle from \"./TodoListTitle\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {\n    addTaskTC, changeTaskTC, deleteTaskTC,\n    deleteToDoListTC, setTasksTC, updateTitleTodoListTC,\n\n} from \"./reducer\";\nimport s from './TodoList.module.css'\n\nclass TodoList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.newTasksTitileRef = React.createRef();\n\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n\n\n    restoreState = () => {\n        this.props.setTasks(this.props.id)\n    };\n\n    state = {\n        tasks: [],\n        filterValue: \"All\"\n    };\n\n    addTask = (newText) => {\n        this.props.addTask(newText,this.props.id)\n    };\n\n    deleteTask = (taskId) => {\n        this.props.deleteTask(this.props.id, taskId)\n    };\n\n\n    deleteToDoList = () => {\n        this.props.deleteToDoList(this.props.id)\n    };\n\n    changeFilter = (newFilterValue) => {\n        this.setState( {\n            filterValue: newFilterValue}\n        )};\n\n    updateTodoTitle = (newTodoListTitle) => {\n        this.props.updateTodoTitle(newTodoListTitle, this.props.id)\n    };\n\n    changeTask = (taskId,obj) => {\n        this.props.changeTask(taskId,obj,this.props.id)\n    };\n\n    changeStatus = (taskId, isDone) => {\n        this.changeTask(taskId, {isDone: isDone});\n    }\n    changeTitle = (taskId, title) => {\n        this.changeTask(taskId, {title: title});\n    }\n\n\n    render = () => {\n        let {tasks=[]} = this.props;\n\n        return (\n\n            <div className={s.todoList}>\n                <div className={s.todoTitle}>\n                    <TodoListTitle updateTodoTitle={this.updateTodoTitle}\n                                   title={this.props.title}\n                                   id={this.props.id}/></div>\n                <button className={s.deleteTodoList} onClick={this.deleteToDoList}>X</button>\n                <div className={s.addForm}>\n                    <AddNewItemForm addItem={this.addTask}/>\n                </div>\n\n\n\n                <TodoListTasks\n                    deleteTask={this.deleteTask}\n                    toDoListId={this.props.toDoListId}\n                    changeStatus={this.changeStatus}\n                    changeTitle={this.changeTitle}\n                    tasks={tasks.filter(t => {\n                        if (this.state.filterValue === \"All\") {\n                            return true;\n                        }\n                        if (this.state.filterValue === \"Active\") {\n                            return t.isDone === false;\n                        }\n                        if (this.state.filterValue === \"Completed\") {\n                            return t.isDone === true;\n                        }\n                    })}/>\n                <div className=\"footer\">\n                    <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\n                </div>\n\n\n\n            </div>\n\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch)=> {\n    return {\n        addTask(newText, todoListId) {\n            dispatch(addTaskTC(newText, todoListId));\n\n        },\n        changeTask(taskId,obj,todoListId) {\n            dispatch(changeTaskTC(taskId,obj,todoListId))\n        },\n        deleteTask(toDoListId, taskId) {\n            dispatch(deleteTaskTC(toDoListId, taskId))\n        },\n        deleteToDoList (id){\n            dispatch(deleteToDoListTC(id))\n        },\n        setTasks(todoListId){\n            let thunk = setTasksTC(todoListId);\n            dispatch(thunk);\n        },\n        updateTodoTitle(newTodoListTitle, todolistId) {\n            dispatch(updateTitleTodoListTC(newTodoListTitle, todolistId));\n        }\n    }\n}\n\nconst ConnectedTodoList = connect(null,mapDispatchToProps)(TodoList)\nexport default ConnectedTodoList;\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addTodoListTC, setTodoListTC} from \"./reducer\";\nclass App extends React.Component {\n\n\n    state = {\n        toDoLists: [],\n    };\n\n    addTodoList = (title) => {\n        this.props.addTodoList(title)\n    };\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    restoreState = () => {\n        this.props.setTodoList()\n    };\n\n    render = () => {\n        const toDoLists = this.props.toDoLists.map(tl => <TodoList key={tl.id} id={tl.id} title={tl.title}\n                                                                   tasks={tl.tasks}/>)\n        return (\n            <div className=\"page\">\n                <div className=\"main\">\n                    <div className=\"description\">\n                        <h1>Welcome to my ToDoList applications</h1>\n                        <AddNewItemForm\n                            addItem={this.addTodoList}/>\n                    </div>\n                </div>\n                <div className=\"App\">\n                    {toDoLists}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state)=>{\n    return {\n        toDoLists: state.toDoLists\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTodoList(newTodoList) {\n            dispatch(addTodoListTC(newTodoList))\n        },\n        setTodoList(toDoLists){\n            dispatch(setTodoListTC(toDoLists))\n        }\n    }\n}\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App)\n\n\nexport default ConnectedApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, createStore} from \"redux\";\nimport reducer from \"./reducer\";\nimport thunkMiddleware from 'redux-thunk'\n\n\n\nconst store = createStore(\n    reducer,\n    applyMiddleware(thunkMiddleware)\n\n);\n\n\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App /></Provider>,\n        document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}